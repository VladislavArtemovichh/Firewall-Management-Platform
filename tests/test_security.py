import pytest
import time
import base64
from unittest.mock import Mock, patch
from fastapi import Request
from fastapi.responses import RedirectResponse

from app.security import (
    check_login_attempts,
    authenticate_user,
    record_login_attempt,
    clear_login_attempts,
    encode_error_message,
    decode_error_message,
    login_attempts
)
from app.models import users

class TestAuthenticateUser:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ authenticate_user"""
    
    def test_authenticate_user_valid_credentials(self):
        """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        assert authenticate_user("admin", "admin123") is True
        assert authenticate_user("developer", "dev123") is True
        assert authenticate_user("auditor", "auditor123") is True
    
    def test_authenticate_user_invalid_username(self):
        """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        assert authenticate_user("nonexistent", "admin123") is False
    
    def test_authenticate_user_invalid_password(self):
        """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º"""
        assert authenticate_user("admin", "wrongpassword") is False
    
    def test_authenticate_user_empty_credentials(self):
        """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø—É—Å—Ç—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        assert authenticate_user("", "") is False
        assert authenticate_user("admin", "") is False
        assert authenticate_user("", "admin123") is False

class TestEncodeDecodeErrorMessage:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
    
    def test_encode_error_message(self):
        """–¢–µ—Å—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        message = "Test error message"
        encoded = encode_error_message(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
        assert encoded != message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π base64
        try:
            decoded = base64.b64decode(encoded.encode('ascii')).decode('utf-8')
            assert decoded == message
        except Exception:
            pytest.fail("Encoded message is not valid base64")
    
    def test_decode_error_message_valid(self):
        """–¢–µ—Å—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        original_message = "Test error message"
        encoded = base64.b64encode(original_message.encode('utf-8')).decode('ascii')
        
        decoded = decode_error_message(encoded)
        assert decoded == original_message
    
    def test_decode_error_message_invalid(self):
        """–¢–µ—Å—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        invalid_encoded = "invalid_base64_string"
        decoded = decode_error_message(invalid_encoded)
        assert decoded == "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    def test_decode_error_message_empty(self):
        """–¢–µ—Å—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        decoded = decode_error_message("")
        # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –∞ –Ω–µ –æ—à–∏–±–∫—É
        assert decoded == ""
    
    def test_encode_decode_roundtrip(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        test_messages = [
            "Simple message",
            "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
            "Message with special chars: !@#$%^&*()",
            "Message with numbers: 12345",
            "Message with unicode: üöÄüî•üíª",
            ""
        ]
        
        for message in test_messages:
            encoded = encode_error_message(message)
            decoded = decode_error_message(encoded)
            assert decoded == message

class TestRecordLoginAttempt:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ record_login_attempt"""
    
    def test_record_login_attempt_basic(self, clear_login_attempts, mock_time):
        """–¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞"""
        username = "testuser"
        
        record_login_attempt(username)
        
        assert username in login_attempts
        assert len(login_attempts[username]) == 1
        assert login_attempts[username][0] == mock_time.current_time
    
    def test_record_login_attempt_multiple(self, clear_login_attempts, mock_time):
        """–¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞"""
        username = "testuser"
        
        record_login_attempt(username)
        mock_time.set_time(mock_time.current_time + 10)
        record_login_attempt(username)
        
        assert len(login_attempts[username]) == 2
        assert login_attempts[username][0] == 1000.0
        assert login_attempts[username][1] == 1010.0
    
    def test_record_login_attempt_with_ip(self, clear_login_attempts, mock_time):
        """–¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ —Å IP –∞–¥—Ä–µ—Å–æ–º"""
        username = "testuser"
        ip_address = "192.168.1.100"
        
        with patch('app.security.metrics_collector') as mock_metrics:
            record_login_attempt(username, ip_address)
            
            assert len(login_attempts[username]) == 1
            mock_metrics.record_failed_login.assert_called_once_with(ip_address)
    
    def test_record_login_attempt_metrics_error(self, clear_login_attempts, mock_time):
        """–¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ —Å –æ—à–∏–±–∫–æ–π –º–µ—Ç—Ä–∏–∫"""
        username = "testuser"
        ip_address = "192.168.1.100"
        
        with patch('app.security.metrics_collector') as mock_metrics:
            mock_metrics.record_failed_login.side_effect = Exception("Metrics error")
            
            # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            record_login_attempt(username, ip_address)
            
            assert len(login_attempts[username]) == 1

class TestClearLoginAttempts:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ clear_login_attempts"""
    
    def test_clear_login_attempts(self, mock_time):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞"""
        username = "testuser"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫
        record_login_attempt(username)
        record_login_attempt(username)
        
        assert len(login_attempts[username]) == 2
        
        # –û—á–∏—â–∞–µ–º
        clear_login_attempts(username)
        
        assert len(login_attempts[username]) == 0
    
    def test_clear_login_attempts_empty(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞"""
        username = "testuser"
        
        # –û—á–∏—â–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏
        clear_login_attempts(username)
        
        assert username in login_attempts
        assert len(login_attempts[username]) == 0

class TestCheckLoginAttempts:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ check_login_attempts"""
    
    def test_check_login_attempts_no_attempts(self, clear_login_attempts):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞"""
        username = "testuser"
        mock_request = Mock(spec=Request)
        
        result = check_login_attempts(username, mock_request)
        
        assert result is None
    
    def test_check_login_attempts_below_limit(self, clear_login_attempts, mock_time):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏ –Ω–∏–∂–µ –ª–∏–º–∏—Ç–∞"""
        username = "testuser"
        mock_request = Mock(spec=Request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º 2 –ø–æ–ø—ã—Ç–∫–∏ (–ª–∏–º–∏—Ç 3)
        record_login_attempt(username)
        record_login_attempt(username)
        
        result = check_login_attempts(username, mock_request)
        
        assert result is None
    
    def test_check_login_attempts_at_limit(self, mock_time):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏ –Ω–∞ –ª–∏–º–∏—Ç–µ"""
        username = "testuser"
        mock_request = Mock(spec=Request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º 3 –ø–æ–ø—ã—Ç–∫–∏ (–ª–∏–º–∏—Ç 3)
        record_login_attempt(username)
        record_login_attempt(username)
        record_login_attempt(username)
        
        result = check_login_attempts(username, mock_request)
        
        # –ü—Ä–∏ 3 –ø–æ–ø—ã—Ç–∫–∞—Ö (–ª–∏–º–∏—Ç 3) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        assert isinstance(result, RedirectResponse)
    
    def test_check_login_attempts_above_limit(self, clear_login_attempts, mock_time):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤—ã—à–µ –ª–∏–º–∏—Ç–∞"""
        username = "testuser"
        mock_request = Mock(spec=Request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º 4 –ø–æ–ø—ã—Ç–∫–∏ (–ª–∏–º–∏—Ç 3)
        record_login_attempt(username)
        record_login_attempt(username)
        record_login_attempt(username)
        record_login_attempt(username)
        
        result = check_login_attempts(username, mock_request)
        
        assert isinstance(result, RedirectResponse)
        assert result.status_code == 303
        # –í –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö FastAPI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è headers["location"] –≤–º–µ—Å—Ç–æ url
        assert result.headers["location"] == "/"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫—É–∫–∏ –µ—Å—Ç—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        assert "error" in result.headers.get("set-cookie", "")
    
    def test_check_login_attempts_expired_attempts(self, clear_login_attempts, mock_time):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        username = "testuser"
        mock_request = Mock(spec=Request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –≤ –ø—Ä–æ—à–ª–æ–º (–±–æ–ª–µ–µ 60 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥)
        login_attempts[username] = [mock_time.current_time - 70]
        
        result = check_login_attempts(username, mock_request)
        
        assert result is None
        assert len(login_attempts[username]) == 0  # –ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã
    
    def test_check_login_attempts_mixed_attempts(self, clear_login_attempts, mock_time):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏ –∏—Å—Ç–µ–∫—à–∏–µ)"""
        username = "testuser"
        mock_request = Mock(spec=Request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏
        login_attempts[username] = [
            mock_time.current_time - 70,  # –ò—Å—Ç–µ–∫—à–∞—è
            mock_time.current_time - 50,  # –ò—Å—Ç–µ–∫—à–∞—è
            mock_time.current_time - 30   # –ê–∫—Ç—É–∞–ª—å–Ω–∞—è
        ]
        
        result = check_login_attempts(username, mock_request)
        
        assert result is None
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã, –Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å
        assert len(login_attempts[username]) >= 1
    
    def test_check_login_attempts_error_message_content(self, clear_login_attempts, mock_time):
        """–¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        username = "testuser"
        mock_request = Mock(spec=Request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º 4 –ø–æ–ø—ã—Ç–∫–∏
        for _ in range(4):
            record_login_attempt(username)
        
        result = check_login_attempts(username, mock_request)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫—É–∫–∏
        set_cookie = result.headers.get("set-cookie", "")
        assert "error=" in set_cookie
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        cookie_parts = set_cookie.split(";")
        error_part = next((part for part in cookie_parts if part.startswith(" error=")), "")
        if error_part:
            encoded_error = error_part.split("=")[1]
            decoded_error = decode_error_message(encoded_error)
            assert "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞" in decoded_error
            assert "–º–∏–Ω" in decoded_error 